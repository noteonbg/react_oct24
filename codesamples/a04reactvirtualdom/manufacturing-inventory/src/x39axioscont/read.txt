npm install axios

------------------------------
for mocking... consider

npm install -g json-server
json-server --watch db.json --port 3001

Create a db.json file with your mock data:

{
  "products": [
    { "id": 1, "name": "Product A", "price": 10.0 },
    { "id": 2, "name": "Product B", "price": 15.0 },
    { "id": 3, "name": "Product C", "price": 20.0 }
  ]
}

running the server
json-server --watch db.json

Access your API:
Get all products: GET http://localhost:3000/products
Get a specific product: GET http://localhost:3000/products/1


 


  GET    /products
GET    /products/:id
POST   /products
PUT    /products/:id
PATCH  /products/:id
DELETE /products/:id

  




-----------------------------------
may be python code..
pip install fastapi uvicorn


# main.py
from fastapi import FastAPI, HTTPException
from typing import List, Dict

app = FastAPI()

# Mock product data
products = [
    {"id": 1, "name": "Product A", "price": 10.0},
    {"id": 2, "name": "Product B", "price": 15.0},
    {"id": 3, "name": "Product C", "price": 20.0},
]

@app.get("/products", response_model=List[Dict])
async def get_products():
    return products

@app.get("/products/{product_id}", response_model=Dict)
async def get_product(product_id: int):
    product = next((p for p in products if p["id"] == product_id), None)
    if product is None:
        raise HTTPException(status_code=404, detail="Product not found")
    return product

# For demonstration purposes, you can create an endpoint to simulate errors
@app.get("/error")
async def get_error(status_code: int):
    if status_code == 400:
        raise HTTPException(status_code=400, detail="Bad Request")
    elif status_code == 404:
        raise HTTPException(status_code=404, detail="Product not found")
    elif status_code == 500:
        raise HTTPException(status_code=500, detail="Server error")
    return {"message": "No error"}

 Accessing the API
You can access the following endpoints:

Get all products: GET http://127.0.0.1:8000/products
Get a specific product: GET http://127.0.0.1:8000/products/{product_id}
Simulate errors:
Bad Request: GET http://127.0.0.1:8000/error?status_code=400
Not Found: GET http://127.0.0.1:8000/error?status_code=404
Server Error: GET http://127.0.0.1:8000/error?status_code=500
Explanation
Mock Data: We have a hardcoded list of products in the products list, simulating a database.

Endpoints:

The /products endpoint returns the list of products.
The /products/{product_id} endpoint returns a specific product based on its ID or raises a 404 error if not found.
The /error endpoint can simulate different HTTP errors for testing purposes.
Connecting to Your React App
Make sure your React app is configured to point to the FastAPI server at http://127.0.0.1:8000/products. This way, the Axios requests in your React app will fetch the mock data served by the FastAPI application.

-----------------------------------

mocking with many options

. JSONPlaceholder
JSONPlaceholder is a free online REST API that you can use for testing and prototyping.

Base URL: https://jsonplaceholder.typicode.com
Example Endpoint: You can access a list of posts with https://jsonplaceholder.typicode.com/posts.
You can customize it by creating fake data that resembles your application's requirements.

2. Mockoon
Mockoon is a desktop application that lets you quickly create
 mock REST APIs.

3. Postman Mock Server

4. Using Express with JSON Server